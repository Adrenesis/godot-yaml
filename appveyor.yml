# Build worker image (VM template)
# image: Visual Studio 2017
image: ubuntu

clone_depth: 5

version: '{build}'

platform:
  - x86
  - x64

configuration:
  - release
  - debug

environment:
  matrix:
    - 
      image: Visual Studio 2017
      os: windows
      MSBUILD_FLAGS: /verbosity:minimal /maxcpucount
      generator: "Visual Studio 15"
      generator_x64: "Visual Studio 15 Win64"
      PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7" 
    - 
      image: ubuntu
      os: linux
      generator_x64: "Unix Makefiles"
     

matrix:
  fast_finish: true

matrix:
  exclude:
    - image: ubuntu
    - platform: x86

# scripts that are called at very beginning, before repo cloning
init:
  - echo %os%
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - date /T & time /T
  - git config --global core.autocrlf input
  - cmake --version
  # Set "build version number" to "short-commit-hash" or when tagged to "tag name" (Travis style)
  - ps: >-
      if ($env:APPVEYOR_REPO_TAG -eq "true")
      {
        Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_TAG_NAME"
      }
      else
      {
        Update-AppveyorBuild -Version "dev-$($env:APPVEYOR_REPO_COMMIT.substring(0,7))"
      }
  # There are multiple pre-installed versions of Python on Appveyor  
  # see https://www.appveyor.com/docs/installed-software/#python
  - echo %PYTHON% %PYTHON_VERSION%
  - "SET PATH=%PYTHON%;%PYTHON%\\bin;%PYTHON%\\Scripts;%PATH%"
  # Show version and architecture for Python
  - "%PYTHON%\\python.exe --version"
  - "%PYTHON%\\python.exe -c \"import struct; print(struct.calcsize('P') * 8)\""
  - if "%PLATFORM%" == "x86" (SET cmake_generator=%generator%)
  - if "%PLATFORM%" == "x64" (SET cmake_generator=%generator_x64%)
install:
  - git submodule update --init --recursive

build_script:
  - cd ..
  - git clone https://github.com/jbeder/yaml-cpp.git
  - cd yaml-cpp
  - mkdir build
  - cd build
  - echo "%generator%"
  - echo "%cmake_generator%"
  - > 
    cmake ..\ 
    -G "%cmake_generator%"
    -DCMAKE_INSTALL_PREFIX="%APPVEYOR_BUILD_FOLDER%\yaml-cpp" 
    -DYAML_CPP_BUILD_TESTS="OFF"
    -DYAML_CPP_BUILD_TOOLS="OFF"
  #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  # build
  - cmake --build . --target ALL_BUILD --config %configuration% -- /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
  # install
  - cmake --build . --target INSTALL --config %configuration%
  - cd ..\..
  - easy_install scons
  - cd godot-yaml\godot-cpp
  - dir
  - if "%PLATFORM%" == "x86" (set bits=32)
  - if "%PLATFORM%" == "x64" (set bits=64)
  - scons platform=%os% arch=%bits% headers=godot_headers generate_bindings=yes target=%configuration%
  - cd ..
  - scons target=%configuration% bits=%bits%

after_build:
  - if "%generator%" == "Visual Studio 15" (set COMPILER="MSVC15")
  - uf "%generator%" == "Unix Makefiles" (set COMPILER="GCC")

  # package dependencies artifact
  - cd demo\bin
  - 7z a -tzip -mx9 "%APPVEYOR_BUILD_FOLDER%\godot-yaml-%APPVEYOR_BUILD_VERSION%-%BUILD_CONFIG%-%platform%-%configuration%.zip"
  - appveyor PushArtifact "%APPVEYOR_BUILD_FOLDER%\godot-yaml-%APPVEYOR_BUILD_VERSION%-%BUILD_CONFIG%-%platform%-%configuration%.zip"

artifacts:
  - path: 'godot-yaml-*.zip'
    name: GodotYaml

# deploy to Github Releases on tag push
deploy:
  provider: GitHub
  release: 'GodotYaml $(APPVEYOR_REPO_TAG_NAME)'
  tag: $(APPVEYOR_REPO_TAG_NAME)
  artifact: GodotYaml
  draft: false
  prerelease: false
  force_update: true               # overwrite files of existing release on GitHub
  on:
    branch: master                 # release from master branch only
    appveyor_repo_tag: true        # deploy on tag push only
  auth_token:                      # encrypted token from GitHub
    secure: 4dm7uTzjL+0fOu5k6huo2PbcGhxj0e7RbXHtkdjiQ1maMLunSup7bdXP4+L58wDV
